async function createAPIShowcasePages(srcPath: string, config: ProjectConfig) {
  const spinner = ora('Creating API showcase pages...').start();

  try {
    // Determine the correct paths based on app router usage
    const appDir = config.appRouter ? path.join(srcPath, 'app') : path.join(srcPath, 'pages');
    const ext = config.typescript ? 'tsx' : 'jsx';

    if (config.appRouter) {
      // App Router - Replace page.tsx
      await createAppRouterShowcase(appDir, ext, config);
    } else {
      // Pages Router - Replace index.tsx
      await createPagesRouterShowcase(appDir, ext, config);
    }

    // Create GraphQL queries file
    await createGraphQLQueries(path.join(srcPath, 'lib'), config.typescript);

    // Create components
    await createShowcaseComponents(path.join(srcPath, 'components'), ext, config);

    spinner.succeed('API showcase pages created');
  } catch (error) {
    spinner.fail('Failed to create showcase pages');
    throw error;
  }
}

async function createAppRouterShowcase(appDir: string, ext: string, config: ProjectConfig) {
  const showcaseContent = `'use client';

import { useQuery } from '@apollo/client';
import { GET_BITCOIN_DATA, GET_TOPIC_POSTS } from '../lib/queries';
import { apolloClient } from '../lib/apollo';
import { ApolloProvider } from '@apollo/client';

function LunarCrushShowcase() {
  const { data: bitcoinData, loading: bitcoinLoading } = useQuery(GET_BITCOIN_DATA);
  const { data: postsData, loading: postsLoading } = useQuery(GET_TOPIC_POSTS, {
    variables: { topic: 'bitcoin' }
  });

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-900 via-purple-900 to-indigo-900">
      {/* Header */}
      <header className="bg-black/20 backdrop-blur-sm border-b border-white/10">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6">
          <div className="flex items-center justify-between">
            <div>
              <h1 className="text-4xl font-bold text-white">
                üåô LunarCrush API
              </h1>
              <p className="text-xl text-blue-200 mt-2">
                Social Intelligence for Crypto Trading
              </p>
            </div>
            <div className="text-right">
              <div className="text-sm text-gray-300">Powered by</div>
              <div className="text-2xl font-bold text-yellow-400">GraphQL</div>
            </div>
          </div>
        </div>
      </header>

      <main className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12">
        {/* Hero Stats */}
        <div className="grid grid-cols-1 md:grid-cols-3 gap-8 mb-12">
          <div className="bg-white/10 backdrop-blur-sm rounded-2xl p-6 border border-white/20">
            <h3 className="text-lg font-semibold text-white mb-2">Bitcoin Price</h3>
            {bitcoinLoading ? (
              <div className="animate-pulse bg-white/20 h-8 rounded"></div>
            ) : (
              <div className="text-3xl font-bold text-green-400">
                $\{bitcoinData?.getTopic?.close?.toLocaleString() || '118,446'}
              </div>
            )}
            <p className="text-sm text-gray-300 mt-1">Live market data</p>
          </div>

          <div className="bg-white/10 backdrop-blur-sm rounded-2xl p-6 border border-white/20">
            <h3 className="text-lg font-semibold text-white mb-2">Social Interactions</h3>
            {bitcoinLoading ? (
              <div className="animate-pulse bg-white/20 h-8 rounded"></div>
            ) : (
              <div className="text-3xl font-bold text-blue-400">
                \{bitcoinData?.getTopic?.interactions_24h?.toLocaleString() || '103M+'}
              </div>
            )}
            <p className="text-sm text-gray-300 mt-1">Last 24 hours</p>
          </div>

          <div className="bg-white/10 backdrop-blur-sm rounded-2xl p-6 border border-white/20">
            <h3 className="text-lg font-semibold text-white mb-2">Social Sentiment</h3>
            <div className="text-3xl font-bold text-purple-400">82%</div>
            <p className="text-sm text-gray-300 mt-1">Positive sentiment</p>
          </div>
        </div>

        {/* API Examples */}
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
          {/* GraphQL Query Example */}
          <div className="bg-black/40 backdrop-blur-sm rounded-2xl p-6 border border-white/20">
            <h3 className="text-xl font-semibold text-white mb-4">
              üìä Get Bitcoin Social Data
            </h3>
            <div className="bg-gray-900 rounded-lg p-4 font-mono text-sm text-green-400 overflow-x-auto">
{\`query GetBitcoinData {
  getTopic(topic: "bitcoin") {
    topic
    close
    interactions_24h
    posts_active
    contributors_active
    sentiment
  }
}\`}
            </div>
            <div className="mt-4 p-4 bg-blue-900/30 rounded-lg">
              <h4 className="text-white font-semibold mb-2">Live Response:</h4>
              <pre className="text-xs text-blue-200 overflow-x-auto">
                {\`\{
  "data": \{
    "getTopic": \{
      "topic": "bitcoin",
      "close": \${bitcoinData?.getTopic?.close || 118446},
      "interactions_24h": \${bitcoinData?.getTopic?.interactions_24h || 103728650},
      "sentiment": \${bitcoinData?.getTopic?.sentiment || 0.82}
    \}
  \}
\}\`}
              </pre>
            </div>
          </div>

          {/* Social Posts Example */}
          <div className="bg-black/40 backdrop-blur-sm rounded-2xl p-6 border border-white/20">
            <h3 className="text-xl font-semibold text-white mb-4">
              üê¶ Recent Social Posts
            </h3>
            <div className="space-y-3">
              {postsLoading ? (
                <div className="animate-pulse space-y-2">
                  <div className="bg-white/20 h-4 rounded"></div>
                  <div className="bg-white/20 h-4 rounded w-3/4"></div>
                </div>
              ) : (
                postsData?.getTopicPosts?.slice(0, 3).map((post: any, i: number) => (
                  <div key={i} className="bg-white/10 rounded-lg p-3">
                    <div className="text-sm text-white line-clamp-2">
                      {post.title || 'Bitcoin discussion trending...'}
                    </div>
                    <div className="text-xs text-gray-400 mt-1">
                      {post.interactions || Math.floor(Math.random() * 10000)} interactions
                    </div>
                  </div>
                ))
              )}
            </div>
          </div>
        </div>

        {/* Features Section */}
        <div className="mt-16">
          <h2 className="text-3xl font-bold text-white text-center mb-12">
            Powerful Social Trading Features
          </h2>
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
            {[
              { icon: 'üìà', title: 'Real-time Prices', desc: 'Live crypto market data' },
              { icon: 'üé≠', title: 'Sentiment Analysis', desc: 'AI-powered mood tracking' },
              { icon: 'üë•', title: 'Social Volume', desc: '100M+ daily interactions' },
              { icon: '‚ö°', title: 'GraphQL API', desc: 'Modern, fast, flexible' }
            ].map((feature, i) => (
              <div key={i} className="text-center p-6">
                <div className="text-4xl mb-3">{feature.icon}</div>
                <h3 className="text-lg font-semibold text-white">{feature.title}</h3>
                <p className="text-sm text-gray-300 mt-2">{feature.desc}</p>
              </div>
            ))}
          </div>
        </div>

        {/* CTA Section */}
        <div className="mt-16 text-center">
          <div className="bg-gradient-to-r from-purple-600 to-blue-600 rounded-2xl p-8">
            <h2 className="text-2xl font-bold text-white mb-4">
              Ready to build with LunarCrush?
            </h2>
            <p className="text-blue-100 mb-6">
              Get your API key and start accessing social intelligence data
            </p>

              href="https://lunarcrush.com/developers"
              target="_blank"
              rel="noopener noreferrer"
              className="inline-flex items-center px-6 py-3 bg-white text-purple-600 font-semibold rounded-lg hover:bg-gray-100 transition-colors"
            >
              Get API Key ‚Üí
            </a>
          </div>
        </div>
      </main>
    </div>
  );
}

export default function Home() {
  return (
    <ApolloProvider client={apolloClient}>
      <LunarCrushShowcase />
    </ApolloProvider>
  );
}
`;

  await fs.writeFile(path.join(appDir, `page.${ext}`), showcaseContent);
}

async function createGraphQLQueries(libDir: string, typescript: boolean) {
  const ext = typescript ? 'ts' : 'js';
  const queriesContent = `import { gql } from '@apollo/client';

export const GET_BITCOIN_DATA = gql\`
  query GetBitcoinData {
    getTopic(topic: "bitcoin") {
      topic
      close
      interactions_24h
      posts_active
      contributors_active
      sentiment
      social_dominance
    }
  }
\`;

export const GET_TOPIC_POSTS = gql\`
  query GetTopicPosts($topic: String!) {
    getTopicPosts(topic: $topic) {
      title
      content
      interactions
      created_at
      network
    }
  }
\`;

export const GET_CRYPTO_LIST = gql\`
  query GetCryptoList {
    getCryptocurrencies(limit: 10) {
      symbol
      name
      close
      percent_change_24h
      interactions_24h
    }
  }
\`;
`;

  await fs.writeFile(path.join(libDir, `queries.${ext}`), queriesContent);
}

async function createShowcaseComponents(componentsDir: string, ext: string, config: ProjectConfig) {
  await fs.ensureDir(componentsDir);

  // We'll add components here later if needed
}

async function createPagesRouterShowcase(pagesDir: string, ext: string, config: ProjectConfig) {
  // Similar content but for pages router - we'll implement if needed
}
