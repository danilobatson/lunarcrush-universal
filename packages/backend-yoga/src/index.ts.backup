import { createYoga, createSchema } from 'graphql-yoga'
import { typeDefs } from './schema'
import { performHealthCheck, healthResponses, HealthCheckConfig } from './utils/health'
import {
  LunarCrushConfig,
  getTopicsList, getTopic, getTopicWhatsup, getTopicTimeSeries, getTopicTimeSeriesV2,
  getTopicPosts, getTopicNews, getTopicCreators, getCategoriesList, getCategory,
  getCategoryTopics, getCategoryTimeSeries, getCategoryPosts, getCategoryNews,
  getCategoryCreators, getCreatorsList, getCreator, getCreatorTimeSeries,
  getCreatorPosts, getCoinsList, getCoinsListV2, getCoin, getCoinTimeSeries,
  getCoinMeta, getStocksList, getStocksListV2, getStock, getStockTimeSeries,
  getNftsList, getNftsListV2, getNft, getNftTimeSeries, getNftTimeSeriesV1,
  getSystemChanges, getSearchesList, getSearch, searchPosts, getPostDetails, getPostTimeSeries
} from './services/lunarcrush'

interface Env {
  LUNARCRUSH_API_KEY: { get(): Promise<string> }
  DB?: any // D1 database binding
  ENVIRONMENT?: string
}

export default {
  async fetch(request: Request, env: Env): Promise<Response> {
    const url = new URL(request.url)
    const apiKey = await env.LUNARCRUSH_API_KEY.get()
    const config: LunarCrushConfig = { apiKey, baseUrl: 'https://lunarcrush.com/api4/public' }
    
    // Health check configuration
    const healthConfig: HealthCheckConfig = {
      apiKey,
      database: env.DB,
      environment: env.ENVIRONMENT || 'production'
    }

    // 🏥 Enhanced Health Check Endpoints
    if (url.pathname === '/health') {
      try {
        const healthResult = await performHealthCheck(healthConfig)
        return new Response(JSON.stringify(healthResult, null, 2), {
          status: healthResult.status === 'healthy' ? 200 : 
                 healthResult.status === 'degraded' ? 200 : 503,
          headers: {
            'Content-Type': 'application/json',
            'Cache-Control': 'no-cache, no-store, must-revalidate'
          }
        })
      } catch (error) {
        return new Response(JSON.stringify({
          status: 'unhealthy',
          error: error instanceof Error ? error.message : 'Health check failed',
          timestamp: new Date().toISOString()
        }), {
          status: 503,
          headers: { 'Content-Type': 'application/json' }
        })
      }
    }

    // Kubernetes liveness probe
    if (url.pathname === '/healthz') {
      const response = healthResponses.liveness()
      return new Response(JSON.stringify(response), {
        status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
    }

    // Kubernetes readiness probe  
    if (url.pathname === '/ready') {
      try {
        const testApiKey = await env.LUNARCRUSH_API_KEY.get()
        const isReady = Boolean(testApiKey)
        const response = healthResponses.readiness(isReady)
        return new Response(JSON.stringify(response), {
          status: isReady ? 200 : 503,
          headers: { 'Content-Type': 'application/json' }
        })
      } catch {
        const response = healthResponses.readiness(false)
        return new Response(JSON.stringify(response), {
          status: 503,
          headers: { 'Content-Type': 'application/json' }
        })
      }
    }

    // Simple health for load balancers
    if (url.pathname === '/ping') {
      return new Response(healthResponses.basic(), {
        status: 200,
        headers: { 'Content-Type': 'text/plain' }
      })
    }

    // 🧘 GraphQL Yoga Server
    const yoga = createYoga({
      schema: createSchema({
        typeDefs,
        resolvers: {
          Query: {
            // Enhanced health resolver for GraphQL queries
            health: async () => {
              try {
                const healthResult = await performHealthCheck(healthConfig)
                return JSON.stringify(healthResult)
              } catch (error) {
                throw new Error(`Health check failed: ${error instanceof Error ? error.message : 'Unknown error'}`)
              }
            },
            
            // Simple health for basic GraphQL queries
            healthSimple: () => 'LunarCrush API Active - Enhanced',
            
            // All existing resolvers remain unchanged
            getTopicsList: () => getTopicsList(config),
            getTopic: (_, { topic }) => getTopic(config, topic),
            getTopicWhatsup: (_, { topic }) => getTopicWhatsup(config, topic),
            getTopicTimeSeries: (_, args) => getTopicTimeSeries(config, args.topic, args.bucket, args.interval, args.start, args.end),
            getTopicTimeSeriesV2: (_, args) => getTopicTimeSeriesV2(config, args.topic, args.bucket),
            getTopicPosts: (_, args) => getTopicPosts(config, args.topic, args.start, args.end),
            getTopicNews: (_, { topic }) => getTopicNews(config, topic),
            getTopicCreators: (_, { topic }) => getTopicCreators(config, topic),
            getCategoriesList: () => getCategoriesList(config),
            getCategory: (_, { category }) => getCategory(config, category),
            getCategoryTopics: (_, { category }) => getCategoryTopics(config, category),
            getCategoryTimeSeries: (_, args) => getCategoryTimeSeries(config, args.category, args.bucket, args.interval, args.start, args.end),
            getCategoryPosts: (_, args) => getCategoryPosts(config, args.category, args.start, args.end),
            getCategoryNews: (_, { category }) => getCategoryNews(config, category),
            getCategoryCreators: (_, { category }) => getCategoryCreators(config, category),
            getCreatorsList: () => getCreatorsList(config),
            getCreator: (_, args) => getCreator(config, args.network, args.id),
            getCreatorTimeSeries: (_, args) => getCreatorTimeSeries(config, args.network, args.id, args.bucket, args.interval, args.start, args.end),
            getCreatorPosts: (_, args) => getCreatorPosts(config, args.network, args.id, args.start, args.end),
            getCoinsList: () => getCoinsList(config),
            getCoinsListV2: () => getCoinsListV2(config),
            getCoin: (_, { symbol }) => getCoin(config, symbol),
            getCoinTimeSeries: (_, args) => getCoinTimeSeries(config, args.symbol, args.interval, args.start, args.end),
            getCoinMeta: (_, { symbol }) => getCoinMeta(config, symbol),
            getStocksList: () => getStocksList(config),
            getStocksListV2: () => getStocksListV2(config),
            getStock: (_, { symbol }) => getStock(config, symbol),
            getStockTimeSeries: (_, args) => getStockTimeSeries(config, args.symbol, args.interval, args.start, args.end),
            getNftsList: () => getNftsList(config),
            getNftsListV2: () => getNftsListV2(config),
            getNft: (_, { id }) => getNft(config, id),
            getNftTimeSeries: (_, args) => getNftTimeSeries(config, args.id, args.interval, args.start, args.end),
            getNftTimeSeriesV1: (_, args) => getNftTimeSeriesV1(config, args.id, args.interval, args.start, args.end),
            getSystemChanges: () => getSystemChanges(config),
            getSearchesList: () => getSearchesList(config),
            getSearch: (_, { id }) => getSearch(config, id),
            searchPosts: (_, { term }) => searchPosts(config, term),
            getPostDetails: (_, { id }) => getPostDetails(config, id),
            getPostTimeSeries: (_, args) => getPostTimeSeries(config, args.id, args.bucket, args.interval, args.start, args.end)
          }
        }
      }),
      
      graphiql: {
        title: 'LunarCrush Universal API - Enhanced Health',
        defaultQuery: `# 🌙 LunarCrush Universal API - Enhanced Health Monitoring

# Comprehensive health check (JSON response)
query HealthCheck {
  health
}

# Simple health check  
query SimpleHealth {
  healthSimple
}

# Get Bitcoin social data
query BitcoinData {
  getTopic(topic: "bitcoin") {
    topic
    title
    interactions_24h
    topic_rank
  }
}`
      }
    })

    return yoga.fetch(request, env)
  }
}
