// ===================================================================
// ðŸš¨ AUTO-GENERATED FILE - DO NOT EDIT MANUALLY! ðŸš¨
// ===================================================================
// This file is automatically generated from schema/schema.graphql
// To make changes:
// 1. Edit schema/schema.graphql
// 2. Run: npm run codegen:all
// ===================================================================

/**
 * LunarCrush GraphQL Schema - Auto-Generated
 * Source: schema/schema.graphql (465 lines)
 * Generated: 2025-07-29T20:52:02.499Z
 */

export const typeDefs = `# LunarCrush Universal Backend - CORRECTED API Schema
# Fixed to match actual LunarCrush API v4 responses
# https://lunarcrush.com/developers/api/endpoints
# Single source of truth for all LunarCrush API types

scalar Date
scalar JSON

# ===== ENUMS =====

enum TimeInterval {
  ONE_HOUR
  FOUR_HOURS
  ONE_DAY
  ONE_WEEK
  ONE_MONTH
}

enum SortDirection {
  ASC
  DESC
}

# ===== QUERY ROOT =====

type Query {
  error: String
  # Health check
  health: String
  healthSimple: String

  # ===== TOPICS ENDPOINTS =====
  getTopicsList: [TopicListItem]
  getTopic(topic: String): TopicDetails
  getTopicWhatsup(topic: String): TopicWhatsup
  getTopicTimeSeries(topic: String, bucket: String, interval: String, start: String, end: String): [TopicTimeSeriesItem]
  getTopicTimeSeriesV2(topic: String, bucket: String): [TopicTimeSeriesItem]
  getTopicPosts(topic: String, start: String, end: String): [TopicPost]
  getTopicNews(topic: String): [TopicNews]
  getTopicCreators(topic: String): [TopicCreator]

  # ===== CATEGORIES ENDPOINTS =====
  getCategoriesList: [CategoryListItem]
  getCategory(category: String): CategoryDetails
  getCategoryTopics(category: String): [CategoryTopic]
  getCategoryTimeSeries(category: String, bucket: String, interval: String, start: String, end: String): [CategoryTimeSeriesItem]
  getCategoryPosts(category: String, start: String, end: String): [CategoryPost]
  getCategoryNews(category: String): [CategoryNews]
  getCategoryCreators(category: String): [CategoryCreator]

  # ===== CREATORS ENDPOINTS =====
  getCreatorsList: [CreatorListItem]
  getCreator(network: String, id: String): CreatorDetails
  getCreatorTimeSeries(network: String, id: String, bucket: String, interval: String, start: String, end: String): [CreatorTimeSeriesItem]
  getCreatorPosts(network: String, id: String, start: String, end: String): [CreatorPost]

  # ===== COINS ENDPOINTS (Fixed argument names) =====
  getCoinsList: [CoinListItem]
  getCoinsListV2: [CoinListItem]
  getCoin(symbol: String): CoinDetails  # Fixed: coin not symbol
  getCoinTimeSeries(symbol: String, bucket: String, interval: String, start: String, end: String): [CoinTimeSeriesItem]  # Fixed: coin not symbol
  getCoinMeta(symbol: String): CoinMeta  # Fixed: coin not symbol

  # ===== STOCKS ENDPOINTS (Fixed argument names) =====
  getStocksList: [StockListItem]
  getStocksListV2: [StockListItem]
  getStock(symbol: String): StockDetails  # Fixed: stock not symbol
  getStockTimeSeries(symbol: String, bucket: String, interval: String, start: String, end: String): [StockTimeSeriesItem]  # Fixed: stock not symbol

  # ===== NFTS ENDPOINTS (Fixed argument names) =====
  getNftsList: [NftListItem]
  getNftsListV2: [NftListItem]
  getNft(id: String): NftDetails  # Fixed: collection not id
  getNftTimeSeries(id: String, bucket: String, interval: String, start: String, end: String): [NftTimeSeriesItem]  # Fixed: collection not id
  getNftTimeSeriesV1(id: String, bucket: String, interval: String, start: String, end: String): [NftTimeSeriesItem]  # Fixed: returns JSON scalar

  # ===== SYSTEM ENDPOINTS (Fixed return types and arguments) =====
  getSystemChanges: [SystemChange]
  getSearchesList: [SearchItem]  # Fixed: SearchItem not SearchList
  getSearch(id: String): SearchResult  # Fixed: returns JSON scalar, argument name
  searchPosts(term: String): [SearchPost]  # Fixed: returns JSON scalar
  getPostDetails(id: String): PostDetails  # Fixed: post_id not id
  getPostTimeSeries(id: String, bucket: String, interval: String, start: String, end: String): [PostTimeSeriesItem]  # Fixed: post_id not id
}

# ===== CORRECTED TYPE DEFINITIONS =====

# Topics Types (mostly correct)
type TopicListItem {
  topic: String
  title: String
  topic_rank: Int
  topic_rank_1h_previous: Int
  topic_rank_24h_previous: Int
  num_contributors: Float
  num_posts: Float
  interactions_24h: Float
}

type TopicDetails {
  topic: String
  title: String
  topic_rank: Int
  related_topics: [String]
  types_count: JSON
  types_interactions: JSON
  types_sentiment: JSON
  types_sentiment_detail: JSON
  interactions_24h: Float
  num_contributors: Int
  num_posts: Int
  categories: [String]
  trend: String
}

type TopicWhatsup {
  summary: String
}

type TopicTimeSeriesItem {
  time: Int
  contributors_active: Int
  contributors_created: Int
  interactions: Float
  posts_active: Int
  posts_created: Int
  sentiment: Float
  spam: Int
  alt_rank: Int
  circulating_supply: Float
  close: Float
  galaxy_score: Float
  high: Float
  low: Float
  market_cap: Float
  market_dominance: Float
  open: Float
  social_dominance: Float
  volume_24h: Float
}

type TopicPost {
  id: String
  post_type: String
  post_title: String
  post_link: String
  post_image: String
  post_created: Int
  post_sentiment: Float
  creator_id: String
  creator_name: String
  creator_display_name: String
  creator_followers: Float
  creator_avatar: String
  interactions_24h: Float
  interactions_total: Float
}

type TopicNews {
  id: String
  post_type: String
  post_title: String
  post_link: String
  post_image: String
  post_created: Int
  post_sentiment: Float
  creator_id: String
  creator_name: String           # ADDED: Missing from API analysis
  creator_display_name: String   # ADDED: Missing from API analysis
  creator_followers: Float       # ADDED: Missing from API analysis
  creator_avatar: String         # ADDED: Missing from API analysis
  interactions_24h: Float        # ADDED: Missing from API analysis
  interactions_total: Float      # ADDED: Missing from API analysis
}

# Fixed TopicCreator with correct field names
type TopicCreator {
  creator_id: String  # Fixed: was 'id'
  creator_name: String  # Fixed: was 'name'
    name: String
  creator_display_name: String  # Fixed: was 'display_name'
  creator_followers: Float  # Fixed: was 'followers'
    followers: Float
  creator_avatar: String  # Fixed: was 'avatar'
  interactions_24h: Float
  id: String
}

# Fixed Category types
type CategoryListItem {
  category: String
  title: String
  # ADDED: Missing fields from API analysis
  category_rank: Int
  category_rank_1h_previous: Int
  category_rank_24h_previous: Int
  interactions_24h: Float
  num_contributors: Float
  num_posts: Float
  social_dominance: Float
}

type CategoryDetails {
  category: String
  title: String
  # ADDED: Missing fields from API analysis
  topic: String
  interactions_24h: Float
  num_contributors: Int
  num_posts: Int
  trend: String
  related_topics: [String]
  types_count: JSON
  types_interactions: JSON
  types_sentiment: JSON
}

type CategoryTopic {
  topic: String
  title: String
  # ADDED: Missing fields from API analysis
  topic_rank: Int
  topic_rank_1h_previous: Int
  topic_rank_24h_previous: Int
  interactions_24h: Float
  num_contributors: Float
  num_posts: Float
  social_dominance: Float
}

type CategoryTimeSeriesItem {
  time: Int
  interactions: Float
  # ADDED: Missing fields from API analysis
  contributors_active: Int
  contributors_created: Int
  posts_active: Int
  posts_created: Int
  sentiment: Float
  spam: Int
}

type CategoryPost {
  id: String
  post_title: String
  post_type: String
  # ADDED: Missing fields from API analysis
  post_link: String
  post_image: String
  post_created: Int
  post_sentiment: Float
  creator_id: String
  creator_name: String
  creator_display_name: String
  creator_followers: Float
  creator_avatar: String
  interactions_24h: Float
  interactions_total: Float
}

type CategoryNews {
  id: String
  post_title: String
  post_type: String
  # ADDED: Missing fields from API analysis
  post_link: String
  post_image: String
  post_created: Int
  post_sentiment: Float
  creator_id: String
  creator_name: String
  creator_display_name: String
  creator_followers: Float
  creator_avatar: String
  interactions_24h: Float
  interactions_total: Float
}

type CategoryCreator {
  creator_id: String
  creator_name: String
  creator_followers: Float
  creator_avatar: String
  creator_rank: Int
  interactions_24h: Float
}

# Fixed Creator types - 100% API coverage
type CreatorListItem {
  creator_id: String
  creator_name: String
  creator_display_name: String
  creator_followers: Float
  creator_avatar: String        # ADDED: Missing from API analysis
  creator_network: String       # FIXED: Was 'network', API returns 'creator_network'
  creator_posts: Int            # ADDED: Missing from API analysis
  creator_rank: Int             # ADDED: Missing from API analysis
  interactions_24h: Float       # ADDED: Missing from API analysis
}

type CreatorDetails {
  creator_id: String
  creator_name: String
  creator_display_name: String
  creator_followers: Float
  creator_avatar: String
  creator_rank: Int             # ADDED: Missing from API analysis
  interactions_24h: Float       # ADDED: Missing from API analysis
  topic_influence: JSON         # ADDED: CRITICAL social trading data!
}

type CreatorTimeSeriesItem {
  time: Int
  interactions: Float
  creator_rank: Int             # ADDED: Missing from API analysis
  followers: Float              # ADDED: Missing from API analysis
  posts_active: Int             # ADDED: Missing from API analysis
}

type CreatorPost {
  id: String
  post_type: String             # ADDED: Missing from API analysis
  post_title: String
  post_link: String             # ADDED: Missing from API analysis
  post_image: String            # ADDED: Missing from API analysis
  post_created: Int             # ADDED: Missing from API analysis
  post_sentiment: Float         # ADDED: Missing from API analysis
  creator_id: String            # ADDED: Missing from API analysis
  creator_name: String          # ADDED: Missing from API analysis
  creator_display_name: String  # ADDED: Missing from API analysis
  creator_followers: Float      # ADDED: Missing from API analysis
  creator_avatar: String        # ADDED: Missing from API analysis
  interactions_24h: Float       # ADDED: Missing from API analysis
  interactions_total: Float     # ADDED: Missing from API analysis
}

# Fixed Coin types
type CoinListItem {
  coin: String  # Fixed: primary identifier
  name: String
  symbol: String  # Still exists but 'coin' is the ID
  logo: String
  price: Float  # Fixed: was 'close'
  market_cap: Float
  alt_rank: Int
  close: Float
}

type CoinDetails {
  coin: String  # Fixed: primary identifier
    close: Float
  name: String
  symbol: String
  logo: String
  price: Float  # Fixed: was 'close'
  market_cap: Float
  alt_rank: Int
  interactions_24h: Float
}

type CoinTimeSeriesItem {
  time: Int
  close: Float  # This one stays 'close' for time series
  high: Float
  low: Float
  volume_24h: Float
}

type CoinMeta {
  symbol: String  coin: String  # Fixed: was 'symbol'
  name: String
  description: String
}

# Fixed Stock types
type StockListItem {
  stock: String  # Fixed: primary identifier
  name: String
  symbol: String  # Still exists but 'stock' is the ID
  logo: String
  price: Float  # Fixed: was 'close'
  close: Float
}

type StockDetails {
  stock: String  # Fixed: primary identifier
    close: Float
  name: String
  symbol: String
  logo: String
  price: Float  # Fixed: was 'close'
  interactions_24h: Float
}

type StockTimeSeriesItem {
  time: Int
  close: Float  # This one stays 'close' for time series
  volume: Float
}

# Fixed NFT types
type NftListItem {
  id: String  collection: String  # Fixed: was 'id'
  name: String
  logo: String
  floor_price: Float
}

type NftDetails {
  id: String  collection: String  # Fixed: was 'id'
  name: String
  logo: String
  floor_price: Float
  interactions_24h: Float
}

type NftTimeSeriesItem {
  time: Int
  floor_price: Float
  volume: Float
}

# Fixed System types
type SystemChange {
  change: String  # Fixed: was 'id'
  type: String
  description: String  # Fixed: was 'change'
  timestamp: Int
  id: String
}

type SearchList {
  id: String
  query: String
}

type SearchItem {
  id: String
  query: String
}

type PostDetails {
  id: String
    title: String
  content: String
  post_title: String  # Fixed: was 'title'
}

type PostTimeSeriesItem {
  time: Int
  interactions: Float
}

# Additional types for fixed JSON returns
type SearchResult {
  id: String
  query: String
  results: [String]
}

type SearchPost {
  id: String
  title: String
}
`;

// Re-export for compatibility
export default typeDefs;
