// ===================================================================
// ðŸš¨ AUTO-GENERATED FILE - DO NOT EDIT MANUALLY! ðŸš¨
// ===================================================================
// This file is automatically generated from schema/schema.graphql
// To make changes:
// 1. Edit schema/schema.graphql
// 2. Run: npm run codegen:backend
// 3. Or run: node scripts/generate-backend-schema.js
// ===================================================================

/**
 * LunarCrush GraphQL Schema - Auto-Generated from Single Source of Truth
 * Source: schema/schema.graphql (674 lines)
 * Generated: 2025-07-28T17:31:42.005Z
 */

export const typeDefs = `# LunarCrush Universal Backend - Official API Schema
# Based on LunarCrush API v4 Documentation
# https://lunarcrush.com/developers/api/endpoints
# Single source of truth for all LunarCrush API types

scalar Date
scalar JSON

# ===== ENUMS =====

enum TimeInterval {
  ONE_HOUR
  FOUR_HOURS
  ONE_DAY
  ONE_WEEK
  ONE_MONTH
}

enum SortDirection {
  ASC
  DESC
}

enum AssetType {
  TOPIC
  COIN
  STOCK
  NFT
  CATEGORY
  CREATOR
}

# ===== CORE API TYPES =====

type ApiConfig {
  generated_at: Date
  request_cost: Int
  credits_left: Int
  credits_cost: Int
  server_time: Int
}

# ===== TOPIC TYPES (Topics are social discussions about cryptocurrencies) =====

type TopicListItem {
  # Core identifiers
  topic: String
  title: String
  topic_rank: Int

  # Social metrics
  interactions_24h: Int
  posts_active: Int
  contributors_active: Int
  sentiment: Float
  social_dominance: Float

  # Market data
  price: Float
  price_formatted: String
  percent_change_24h: Float
  percent_change_7d: Float
  market_cap: Float
  market_cap_formatted: String
  volume_24h: Float
  market_dominance: Float

  # LunarCrush metrics
  galaxy_score: Float
  alt_rank: Int
  close: Float
  volatility: Float

  # Metadata
  categories: [String]
  classification: String
  description: String
  logo: String

  # Links
  github: String
  website: String
  coingecko: String
  coinmarketcap: String
  twitter: String
  telegram: String
  discord: String
  reddit: String
  medium: String
  youtube: String
  linkedin: String
  facebook: String
  instagram: String
  tiktok: String
}

type TopicDetails {
  # Same fields as TopicListItem plus additional details
  topic: String
  title: String
  topic_rank: Int
  interactions_24h: Int
  posts_active: Int
  contributors_active: Int
  sentiment: Float
  social_dominance: Float
  price: Float
  price_formatted: String
  percent_change_24h: Float
  percent_change_7d: Float
  market_cap: Float
  market_cap_formatted: String
  volume_24h: Float
  market_dominance: Float
  galaxy_score: Float
  alt_rank: Int
  close: Float
  volatility: Float
  categories: [String]
  classification: String
  description: String
  logo: String
  github: String
  website: String
  coingecko: String
  coinmarketcap: String
  twitter: String
  telegram: String
  discord: String
  reddit: String
  medium: String
  youtube: String
  linkedin: String
  facebook: String
  instagram: String
  tiktok: String
}

type TopicTimeSeriesItem {
  time: Date
  interactions: Int
  posts: Int
  contributors: Int
  sentiment: Float
  price: Float
  market_cap: Float
  volume: Float
}

type TopicPost {
  post_type: String
  post_title: String
  post_link: String
  post_image: String
  post_created: Date
  post_sentiment: Float
  creator_id: String
  creator_name: String
  creator_display_name: String
  creator_followers: Int
  creator_avatar: String
  interactions_24h: Int
  interactions_total: Int
}

type TopicNews {
  post_type: String
  post_title: String
  post_link: String
  post_image: String
  post_created: Date
  post_sentiment: Float
  creator_id: String
  creator_name: String
  creator_display_name: String
  creator_followers: Int
  creator_avatar: String
  interactions_24h: Int
  interactions_total: Int
}

type TopicCreator {
  creator_id: String
  creator_name: String
  creator_avatar: String
  creator_followers: Int
  creator_rank: Int
  interactions_24h: Int
}

type TopicWhatsup {
  # TODO: Define based on API response structure
  topic: String
  summary: String
}

# ===== COIN TYPES (Coins are cryptocurrency assets with market data) =====

type CoinListItem {
  # Core identifiers
  id: Int
  name: String
  symbol: String
  slug: String

  # Market data
  price: Float
  price_formatted: String
  percent_change_1h: Float
  percent_change_24h: Float
  percent_change_7d: Float
  percent_change_30d: Float
  market_cap: Float
  market_cap_formatted: String
  volume_24h: Float
  circulating_supply: Float
  max_supply: Float

  # LunarCrush metrics
  galaxy_score: Float
  alt_rank: Int
  volatility: Float

  # Social metrics
  interactions_24h: Int
  posts_active: Int
  contributors_active: Int
  sentiment: Float
  social_dominance: Float

  # Technical data
  network: String
  address: String

  # Metadata
  categories: [String]
  logo: String
}

type CoinDetails {
  # Same as CoinListItem with additional metadata
  id: Int
  name: String
  symbol: String
  slug: String
  price: Float
  price_formatted: String
  percent_change_1h: Float
  percent_change_24h: Float
  percent_change_7d: Float
  percent_change_30d: Float
  market_cap: Float
  market_cap_formatted: String
  volume_24h: Float
  circulating_supply: Float
  max_supply: Float
  galaxy_score: Float
  alt_rank: Int
  volatility: Float
  interactions_24h: Int
  posts_active: Int
  contributors_active: Int
  sentiment: Float
  social_dominance: Float
  network: String
  address: String
  categories: [String]
  logo: String
}

type CoinTimeSeriesItem {
  time: Date
  price: Float
  market_cap: Float
  volume: Float
  interactions: Int
  posts: Int
  contributors: Int
  sentiment: Float
}

type CoinMetadata {
  id: Int
  name: String
  symbol: String
  description: String
  website: String
  github: String
  twitter: String
  telegram: String
  discord: String
  reddit: String
  medium: String
  youtube: String
  linkedin: String
  facebook: String
  instagram: String
  tiktok: String
  logo: String
  categories: [String]
}

# ===== CATEGORY TYPES =====

type CategoryListItem {
  category: String
  title: String
  category_rank: Int
  interactions_24h: Int
  posts_active: Int
  contributors_active: Int
  sentiment: Float
  topics_count: Int
}

type CategoryDetails {
  category: String
  title: String
  category_rank: Int
  interactions_24h: Int
  posts_active: Int
  contributors_active: Int
  sentiment: Float
  topics_count: Int
  description: String
}

type CategoryTopic {
  topic: String
  title: String
  topic_rank: Int
  interactions_24h: Int
  sentiment: Float
  price: Float
  market_cap: Float
}

type CategoryTimeSeriesItem {
  time: Date
  interactions: Int
  posts: Int
  contributors: Int
  sentiment: Float
}

type CategoryPost {
  post_type: String
  post_title: String
  post_link: String
  post_image: String
  post_created: Date
  post_sentiment: Float
  creator_id: String
  creator_name: String
  creator_display_name: String
  creator_followers: Int
  creator_avatar: String
  interactions_24h: Int
  interactions_total: Int
}

type CategoryNews {
  post_type: String
  post_title: String
  post_link: String
  post_image: String
  post_created: Date
  post_sentiment: Float
  creator_id: String
  creator_name: String
  creator_display_name: String
  creator_followers: Int
  creator_avatar: String
  interactions_24h: Int
  interactions_total: Int
}

type CategoryCreator {
  creator_id: String
  creator_name: String
  creator_avatar: String
  creator_followers: Int
  creator_rank: Int
  interactions_24h: Int
}

# ===== CREATOR TYPES =====

type CreatorListItem {
  creator_id: String
  creator_name: String
  creator_display_name: String
  creator_avatar: String
  creator_followers: Int
  creator_rank: Int
  interactions_24h: Int
  network: String
}

type CreatorDetails {
  creator_id: String
  creator_name: String
  creator_display_name: String
  creator_avatar: String
  creator_followers: Int
  creator_rank: Int
  interactions_24h: Int
  network: String
  # Additional creator details
  description: String
  verified: Boolean
}

type CreatorTimeSeriesItem {
  time: Date
  interactions: Int
  posts: Int
  followers: Int
}

type CreatorPost {
  post_type: String
  post_title: String
  post_link: String
  post_image: String
  post_created: Date
  post_sentiment: Float
  interactions_24h: Int
  interactions_total: Int
}

# ===== POST TYPES =====

type PostDetails {
  post_type: String
  post_id: String
  post_title: String
  post_link: String
  post_image: String
  post_created: Date
  post_sentiment: Float
  creator_id: String
  creator_name: String
  creator_display_name: String
  creator_followers: Int
  creator_avatar: String
  interactions_24h: Int
  interactions_total: Int
}

type PostTimeSeriesItem {
  time: Date
  interactions: Int
}

# ===== SEARCH TYPES =====

type SearchResult {
  type: String
  id: String
  name: String
  symbol: String
  description: String
  logo: String
}

# ===== RESPONSE WRAPPER TYPES =====

type TopicListResponse {
  config: ApiConfig
  data: [TopicListItem]
}

type TopicDetailsResponse {
  config: ApiConfig
  data: TopicDetails
}

type CoinListResponse {
  config: ApiConfig
  data: [CoinListItem]
}

type CoinDetailsResponse {
  config: ApiConfig
  data: CoinDetails
}

type CategoryListResponse {
  config: ApiConfig
  data: [CategoryListItem]
}

type CreatorListResponse {
  config: ApiConfig
  data: [CreatorListItem]
}

# ===== ROOT QUERY TYPE =====
# Based on official LunarCrush API v4 endpoints

type Query {
  # Health check
  health: String

  # ===== TOPICS ENDPOINTS =====
  # https://lunarcrush.com/api4/public/topics/list/v1
  getTopicsList(
    sort: String
    limit: Int
  ): TopicListResponse

  # https://lunarcrush.com/api4/public/topic/:topic/v1
  getTopic(topic: String!): TopicDetailsResponse

  # https://lunarcrush.com/api4/public/topic/:topic/whatsup/v1
  getTopicWhatsup(topic: String!): TopicWhatsup

  # https://lunarcrush.com/api4/public/topic/:topic/time-series/v1
  getTopicTimeSeries(
    topic: String!
    bucket: String
    interval: String
    start: String
    end: String
  ): [TopicTimeSeriesItem]

  # https://lunarcrush.com/api4/public/topic/:topic/time-series/v2
  getTopicTimeSeriesV2(
    topic: String!
    bucket: String
  ): [TopicTimeSeriesItem]

  # https://lunarcrush.com/api4/public/topic/:topic/posts/v1
  getTopicPosts(
    topic: String!
    start: String
    end: String
  ): [TopicPost]

  # https://lunarcrush.com/api4/public/topic/:topic/news/v1
  getTopicNews(topic: String!): [TopicNews]

  # https://lunarcrush.com/api4/public/topic/:topic/creators/v1
  getTopicCreators(topic: String!): [TopicCreator]

  # ===== COINS ENDPOINTS =====
  # https://lunarcrush.com/api4/public/coins/list/v1
  getCoinsList(
    sort: String
    filter: String
    limit: Int
  ): CoinListResponse

  # https://lunarcrush.com/api4/public/coins/list/v2
  getCoinsListV2(
    sort: String
    filter: String
    limit: Int
  ): CoinListResponse

  # https://lunarcrush.com/api4/public/coins/:coin/v1
  getCoin(coin: String!): CoinDetailsResponse

  # https://lunarcrush.com/api4/public/coins/:coin/meta/v1
  getCoinMeta(coin: String!): CoinMetadata

  # https://lunarcrush.com/api4/public/coins/:coin/time-series/v1
  getCoinTimeSeries(
    coin: String!
    bucket: String
    interval: String
    start: String
    end: String
  ): [CoinTimeSeriesItem]

  # https://lunarcrush.com/api4/public/coins/:coin/time-series/v2
  getCoinTimeSeriesV2(
    coin: String!
    bucket: String
    change: String
  ): [CoinTimeSeriesItem]

  # ===== CATEGORIES ENDPOINTS =====
  # https://lunarcrush.com/api4/public/categories/list/v1
  getCategoriesList: CategoryListResponse

  # https://lunarcrush.com/api4/public/category/:category/v1
  getCategory(category: String!): CategoryDetails

  # https://lunarcrush.com/api4/public/category/:category/topics/v1
  getCategoryTopics(category: String!): [CategoryTopic]

  # https://lunarcrush.com/api4/public/category/:category/time-series/v1
  getCategoryTimeSeries(
    category: String!
    bucket: String
    interval: String
    start: String
    end: String
  ): [CategoryTimeSeriesItem]

  # https://lunarcrush.com/api4/public/category/:category/posts/v1
  getCategoryPosts(
    category: String!
    start: String
    end: String
  ): [CategoryPost]

  # https://lunarcrush.com/api4/public/category/:category/news/v1
  getCategoryNews(category: String!): [CategoryNews]

  # https://lunarcrush.com/api4/public/category/:category/creators/v1
  getCategoryCreators(category: String!): [CategoryCreator]

  # ===== CREATORS ENDPOINTS =====
  # https://lunarcrush.com/api4/public/creators/list/v1
  getCreatorsList(
    sort: String
    limit: Int
  ): CreatorListResponse

  # https://lunarcrush.com/api4/public/creator/:network/:id/v1
  getCreator(network: String!, id: String!): CreatorDetails

  # https://lunarcrush.com/api4/public/creator/:network/:id/time-series/v1
  getCreatorTimeSeries(
    network: String!
    id: String!
    bucket: String
    interval: String
    start: String
    end: String
  ): [CreatorTimeSeriesItem]

  # https://lunarcrush.com/api4/public/creator/:network/:id/posts/v1
  getCreatorPosts(
    network: String!
    id: String!
    start: String
    end: String
  ): [CreatorPost]

  # ===== POSTS ENDPOINTS =====
  # https://lunarcrush.com/api4/public/posts/:post_type/:post_id/v1
  getPost(post_type: String!, post_id: String!): PostDetails

  # https://lunarcrush.com/api4/public/posts/:post_type/:post_id/time-series/v1
  getPostTimeSeries(
    post_type: String!
    post_id: String!
    bucket: String
    interval: String
    start: String
    end: String
  ): [PostTimeSeriesItem]

  # ===== SEARCH ENDPOINTS =====
  # https://lunarcrush.com/api4/public/searches/:slug
  getSearch(slug: String!): [SearchResult]
}

# ===== SUBSCRIPTION TYPE =====
type Subscription {
  # Real-time topic updates
  topicUpdates(topic: String!): TopicDetails

  # Real-time coin updates
  coinUpdates(coin: String!): CoinDetails

  # Real-time category updates
  categoryUpdates(category: String!): CategoryDetails
}
`;

// Re-export for compatibility
export default typeDefs;
