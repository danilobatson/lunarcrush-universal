# LunarCrush Universal Backend - CORRECTED API Schema
# Fixed to match actual LunarCrush API v4 responses
# https://lunarcrush.com/developers/api/endpoints
# Single source of truth for all LunarCrush API types

scalar Date
scalar JSON
scalar UnixTimestamp

# ===== ENUMS =====

enum TimeInterval {
	ONE_HOUR
	FOUR_HOURS
	ONE_DAY
	ONE_WEEK
	ONE_MONTH
}

enum SortDirection {
	ASC
	DESC
}

# ===== QUERY ROOT =====

type Query {
	# ===== HEALTH & SYSTEM MONITORING =====
	health: String
	hello: String

	# Simplified system monitoring (security-focused)
	systemHealth: SystemHealthResponse
	ping: PingResponse

	# ===== TOPICS ENDPOINTS =====
	getTopicsList: [TopicListItem]
	getTopic(topic: String!): TopicDetails
	getTopicWhatsup(topic: String!): TopicWhatsup
	getTopicTimeSeries(
		topic: String!
		bucket: String
		interval: String
		start: UnixTimestamp
		end: UnixTimestamp
	): [TopicTimeSeriesItem]
	getTopicTimeSeriesV2(topic: String!, bucket: String): [TopicTimeSeriesItem]
	getTopicPosts(
		topic: String!
		start: UnixTimestamp
		end: UnixTimestamp
	): [TopicPost]
	getTopicNews(topic: String!): [TopicNews]
	getTopicCreators(topic: String!): [TopicCreator]

	# ===== CATEGORIES ENDPOINTS =====
	getCategoriesList: [CategoryListItem]
	getCategory(category: String!): CategoryDetails
	getCategoryTopics(category: String!): [CategoryTopic]
	getCategoryTimeSeries(
		category: String!
		bucket: String
		interval: String
		start: UnixTimestamp
		end: UnixTimestamp
	): [CategoryTimeSeriesItem]
	getCategoryPosts(
		category: String!
		start: UnixTimestamp
		end: UnixTimestamp
	): [CategoryPost]
	getCategoryNews(category: String!): [CategoryNews]
	getCategoryCreators(category: String!): [CategoryCreator]

	# ===== CREATORS ENDPOINTS =====
	getCreatorsList: [CreatorListItem]
	getCreator(network: String!, id: String!): CreatorDetails
	getCreatorTimeSeries(
		network: String!
		id: String!
		bucket: String
		interval: String
		start: UnixTimestamp
		end: UnixTimestamp
	): [CreatorTimeSeriesItem]
	getCreatorPosts(
		network: String!
		id: String!
		start: UnixTimestamp
		end: UnixTimestamp
	): [CreatorPost]

	# ===== COINS ENDPOINTS =====
	getCoinsList(
		sort: String
		filter: String
		limit: Int
		desc: String
		page: Int
	): [CoinListItem]
	getCoinsListV2(
		sort: String
		filter: String
		limit: Int
		desc: String
		page: Int
	): [CoinListItem]
	getCoin(coin: String!): CoinDetails
	getCoinTimeSeries(
		coin: String!
		bucket: String
		interval: String
		start: UnixTimestamp
		end: UnixTimestamp
	): [CoinTimeSeriesItem]
	getCoinMeta(coin: String!): CoinMeta

	# ===== STOCKS ENDPOINTS =====
	getStocksList: [StockListItem]
	getStocksListV2(
		sort: String
		limit: Int
		desc: String
		page: Int
	): [StockListItem]
	getStock(stock: String!): StockDetails
	getStockTimeSeries(
		stock: String!
		bucket: String
		interval: String
		start: UnixTimestamp
		end: UnixTimestamp
	): [StockTimeSeriesItem]

	# ===== NFTS ENDPOINTS =====
	getNftsList(sort: String, limit: Int, desc: String, page: Int): [NftListItem]
	getNftsListV2(
		sort: String
		limit: Int
		desc: String
		page: Int
	): [NftListItem]
	getNft(id: String!): NftDetails
	getNftTimeSeries(
		id: String!
		bucket: String
		interval: String
		start: UnixTimestamp
		end: UnixTimestamp
	): [NftTimeSeriesItem]
	getNftTimeSeriesV2(
		nft: String!
		bucket: String
		interval: String
		start: UnixTimestamp
		end: UnixTimestamp
	): [NftTimeSeriesItem]

	# ===== SYSTEM ENDPOINTS =====
	getSystemChanges(start: UnixTimestamp, end: UnixTimestamp): [SystemChange]

	# ===== POSTS ENDPOINTS =====
	getPostDetails(post_type: String!, post_id: String!): PostDetails
	getPostTimeSeries(post_type: String!, post_id: String!): [PostTimeSeriesItem]
}

# type Mutation {
# 	updateUserPreferences(input: UserPreferencesInput!): UserPreferences!
# 	createTopic(input: CreateTopicInput!): Topic!
# }

# ===== SYSTEM MONITORING TYPES =====

type SystemHealthResponse {
	status: String!
	timestamp: String!
	uptime: Int!
	version: String!
}

type PingResponse {
	status: String!
	timestamp: String!
}

# ===== USER TYPES =====

type UserPreferences {
	theme: String
	currency: String
	notifications: Boolean
	favoriteTopics: [String!]
}

type Topic {
	topic: String!
	category: String!
	description: String
	createdAt: String!
}

input UserPreferencesInput {
	theme: String
	currency: String
	notifications: Boolean
	favoriteTopics: [String!]
}

input CreateTopicInput {
	topic: String!
	category: String!
	description: String
}

# ===== LUNARCRUSH API TYPES =====

type TopicListItem {
	topic: String
	title: String
	topic_rank: Int
	topic_rank_1h_previous: Int
	topic_rank_24h_previous: Int
	num_contributors: Float
	num_posts: Float
	interactions_24h: Float
}

type TopicDetails {
	topic: String
	title: String
	topic_rank: Int
	related_topics: [String]
	types_count: JSON
	types_interactions: JSON
	types_sentiment: JSON
	types_sentiment_detail: JSON
	interactions_24h: Float
	num_contributors: Int
	num_posts: Int
	categories: [String]
	trend: String
}

type TopicWhatsup {
	summary: String
}

type TopicTimeSeriesItem {
	time: Int
	contributors_active: Int
	contributors_created: Int
	interactions: Float
	posts_active: Int
	posts_created: Int
	sentiment: Float
	spam: Int
	alt_rank: Int
	circulating_supply: Float
	close: Float
	galaxy_score: Float
	high: Float
	low: Float
	market_cap: Float
	market_dominance: Float
	open: Float
	social_dominance: Float
	volume_24h: Float
}

type TopicPost {
	id: String
	post_type: String
	post_title: String
	post_link: String
	post_image: String
	post_created: Int
	post_sentiment: Float
	creator_id: String
	creator_name: String
	creator_display_name: String
	creator_followers: Float
	creator_avatar: String
	interactions_24h: Float
	interactions_total: Float
}

type TopicNews {
	id: String
	post_type: String
	post_title: String
	post_link: String
	post_image: String
	post_created: Float
	post_sentiment: Float
	creator_id: String
	creator_name: String
	creator_display_name: String
	creator_followers: Float
	creator_avatar: String
	interactions_24h: Float
	interactions_total: Float
}

type TopicCreator {
	creator_id: String
	creator_name: String
	creator_avatar: String
	creator_followers: Float
	creator_rank: Float
	interactions_24h: Float
}

type CategoryListItem {
	category: String
	title: String
	category_rank: Int
	category_rank_1h_previous: Int
	category_rank_24h_previous: Int
	interactions_24h: Float
	num_contributors: Float
	num_posts: Float
	social_dominance: Float
}

type CategoryDetails {
	topic: String
	title: String
	related_topics: [String]
	types_count: JSON
	types_interactions: JSON
	types_sentiment: JSON
	types_sentiment_detail: JSON
	interactions_24h: Float
	num_contributors: Int
	num_posts: Int
	trend: String
}

type CategoryTopic {
	topic: Int
	title: String
	topic_rank: Int
	topic_rank_1h_previous: Int
	topic_rank_24h_previous: Int
	num_contributors: Float
	social_dominance: Float
	num_posts: Float
	interactions_24h: Float
}

type CategoryTimeSeriesItem {
	time: Int
	contributors_active: Int
	contributors_created: Int
	interactions: Float
	posts_active: Int
	posts_created: Int
	sentiment: Float
	spam: Int
}

type CategoryPost {
	id: String
	post_type: String
	post_title: String
	post_link: String
	post_image: String
	post_created: Int
	post_sentiment: Float
	creator_id: String
	creator_name: String
	creator_display_name: String
	creator_followers: Float
	creator_avatar: String
	interactions_24h: Float
	interactions_total: Float
}

type CategoryNews {
	id: String
	post_title: String
	post_type: String
	post_link: String
	post_image: String
	post_created: Int
	post_sentiment: Float
	creator_id: String
	creator_name: String
	creator_display_name: String
	creator_followers: Float
	creator_avatar: String
	interactions_24h: Float
	interactions_total: Float
}

type CategoryCreator {
	creator_id: String
	creator_name: String
	creator_avatar: String
	creator_followers: Float
	creator_rank: Int
	interactions_24h: Float
}

type CreatorListItem {
	creator_display_name: String
	creator_id: String
	creator_network: String
	creator_avatar: String
	creator_followers: Float
	creator_name: String
	creator_posts: Int
	creator_rank: Int
	interactions_24h: Float
}

type CreatorDetails {
	creator_id: String
	creator_name: String
	creator_display_name: String
	creator_avatar: String
	creator_followers: Float
	creator_rank: String
	interactions_24h: Float
	topic_influence: [TopicInfluence]
}

type TopicInfluence {
	topic: String
	count: Int
	percent: Float
	rank: Int
}

type CreatorTimeSeriesItem {
	time: Float
	followers: Float
	interactions: Float
	posts_active: Int
	creator_rank: Float
}

type CreatorPost {
	id: String
	post_type: String
	post_title: String
	post_created: Float
	post_sentiment: Float
	post_link: String
	post_image: String
	creator_id: String
	creator_name: String
	creator_display_name: String
	creator_followers: Float
	creator_avatar: String
	interactions_24h: Float
	interactions_total: Float
}

type CoinListItem {
	id: Int
	symbol: String
	name: String
	price: Float
	price_btc: Float
	volume_24h: Float
	volatility: Float
	circulating_supply: Float
	max_supply: Float
	percent_change_1h: Float
	percent_change_24h: Float
	percent_change_7d: Float
	percent_change_30d: Float
	market_cap: Float
	market_cap_rank: Int
	interactions_24h: Float
	social_volume_24h: Float
	social_dominance: Float
	market_dominance: Float
	market_dominance_prev: Float
	galaxy_score: Float
	galaxy_score_previous: Float
	alt_rank: Int
	alt_rank_previous: Int
	sentiment: Float
	categories: String
	blockchains: [Blockchain]
	last_updated_price: Int
	last_updated_price_by: String
	topic: String
	logo: String
}

type CoinDetails {
	id: Int
	name: String
	symbol: String
	price: Float
	price_btc: Float
	market_cap: Float
	percent_change_24h: Float
	percent_change_7d: Float
	percent_change_30d: Float
	volume_24h: Float
	max_supply: Float
	circulating_supply: Float
	close: Float
	galaxy_score: Float
	alt_rank: Int
	volatility: Float
	market_cap_rank: Int
}

type CoinTimeSeriesItem {
	time: Int
	contributors_active: Int
	contributors_created: Int
	interactions: Float
	posts_active: Int
	posts_created: Int
	sentiment: Float
	spam: Int
	alt_rank: Int
	circulating_supply: Float
	close: Float
	galaxy_score: Float
	high: Float
	low: Float
	market_cap: Float
	market_dominance: Float
	open: Float
	social_dominance: Float
	volume_24h: Float
}

type Blockchain {
	type: String
	network: String
	address: String
	decimals: Int
}

type CoinMeta {
	id: Int
	name: String
	symbol: String
	market_categories: String
	updated: Float
	blockchain: [Blockchain]
	short_summary: String
	description: String
	github_link: String
	website_link: String
	whitepaper_link: String
	twitter_link: String
	reddit_link: String
	header_image: String
	header_text: String
	videos: String
	coingecko_link: String
	coinmarketcap_link: String
}

type StockListItem {
	id: Int
	symbol: String
	name: String
	price: Float
	volume_24h: Float
	percent_change_24h: Float
	market_cap: String
	market_cap_rank: Int
	interactions_24h: Float
	social_volume_24h: Float
	social_dominance: Float
	market_dominance: Float
	market_dominance_prev: Float
	galaxy_score: Float
	galaxy_score_previous: Float
	alt_rank: Int
	alt_rank_previous: Int
	sentiment: Float
	categories: String
	last_updated_price: Int
	last_updated_price_by: String
	topic: String
	logo: String
}

type StockDetails {
	id: Int
	name: String
	symbol: String
	price: Float
	market_cap: Float
	percent_change_24h: Float
	volume_24h: Float
	close: Float
	market_cap_rank: Int
}

type StockTimeSeriesItem {
	time: Int
	close: Float
	alt_rank: Int
	contributors_active: Int
	contributors_created: Int
	galaxy_score: Float
	high: Float
	interactions: Float
	low: Float
	market_cap: Float
	market_dominance: Float
	open: Float
	posts_active: Int
	posts_created: Int
	sentiment: Float
	social_dominance: Float
	spam: Int
}

type NftListItem {
	id: Int
	name: String
	logo: String
	floor_price: Float
	alt_rank: Int
	base_crypto: String
	galaxy_score: Float
	interactions_24h: Float
	lunar_id: String
	market_cap: Float
	percent_change_24h: Float
	social_contributors: Int
	social_dominance: Float
	social_volume_24h: Float
	volume_24h: Float
}

type NftDetails {
	id: Int
	name: String
	floor_price: Float
	market_cap: Float
	percent_change_24h: Float
	volume_24h: Float
}

type NftTimeSeriesItem {
	time: Int
	alt_rank: Int
	contributors_active: Int
	contributors_created: Int
	interactions: Float
	market_cap: Float
	posts_active: Int
	posts_created: Int
	sentiment: Float
	social_dominance: Float
}

type SystemChange {
	asset_id: String
	asset_name: String
	asset_type: String
	change: String
	description: String
	time: Int
}

type PostDetails {
	type: String
	id: String
	title: String
	description: String
	extraText: String
	metrics: PostMetrics
	image: PostImage
	video: String
	images: [String]
	creator_id: String
	creator_name: String
	creator_display_name: String
	creator_avatar: String
	topics: [String]
	categories: [String]
}

type PostMetrics {
	bookmarks: Int
	favorites: Int
	retweets: Int
	replies: Int
	views: Int
}

type PostImage {
	src: String
	width: Int
	height: Int
}

type PostTimeSeriesItem {
	time: String
	interactions: Float
}
